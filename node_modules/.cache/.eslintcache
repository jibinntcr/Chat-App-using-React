[{"C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\index.js":"1","C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\App.js":"2","C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\components\\Auth.js":"3","C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\components\\Chat.js":"4","C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\components\\AppWrapper.js":"5","C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\firebase-config.js":"6"},{"size":232,"mtime":1702034612267,"results":"7","hashOfConfig":"8"},{"size":1196,"mtime":1702038150544,"results":"9","hashOfConfig":"8"},{"size":674,"mtime":1702034612333,"results":"10","hashOfConfig":"8"},{"size":1964,"mtime":1702038266203,"results":"11","hashOfConfig":"8"},{"size":752,"mtime":1702036152646,"results":"12","hashOfConfig":"8"},{"size":966,"mtime":1702035251511,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yz4sos",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\index.js",[],[],"C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\App.js",["34","35","36"],[],"//import React, { useState, useEffect } from \"react\";\nimport { Chat } from \"./components/Chat\";\nimport { Auth } from \"./components/Auth.js\";\nimport { AppWrapper } from \"./components/AppWrapper\";\nimport Cookies from \"universal-cookie\";\nimport \"./App.css\";\n\nconst cookies = new Cookies();\n\nfunction ChatApp() {\n  const [isAuth, setIsAuth] = useState(cookies.get(\"auth-token\"));\n  const [isInChat, setIsInChat] = useState(null);\n  const [room, setRoom] = useState(\"\");\n\n  if (!isAuth) {\n    return (\n      <AppWrapper\n        isAuth={isAuth}\n        setIsAuth={setIsAuth}\n        setIsInChat={setIsInChat}\n      >\n        <Auth setIsAuth={setIsAuth} />\n      </AppWrapper>\n    );\n  }\n\n  return (\n    <AppWrapper isAuth={isAuth} setIsAuth={setIsAuth} setIsInChat={setIsInChat}>\n      {!isInChat ? (\n        <div className=\"room\">\n          <label> Type room name: </label>\n          <input onChange={(e) => setRoom(e.target.value)} />\n          <button\n            onClick={() => {\n              setIsInChat(true);\n            }}\n          >\n            Enter Chat\n          </button>\n        </div>\n      ) : (\n        <Chat room={room} />\n      )}\n    </AppWrapper>\n  );\n}\n\nexport default ChatApp;\n","C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\components\\Auth.js",[],[],"C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\components\\Chat.js",["37","38","39","40"],[],"\n//import React, { useState, useEffect } from \"react\";\nimport { db, auth } from \"../firebase-config\";\nimport {\n  collection,\n  addDoc,\n  where,\n  serverTimestamp,\n  onSnapshot,\n  query,\n  orderBy,\n} from \"firebase/firestore\";\n\nimport \"../styles/Chat.css\";\n\nexport const Chat = ({ room }) => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messagesRef = collection(db, \"messages\");\n\n  useEffect(() => {\n    const queryMessages = query(\n      messagesRef,\n      where(\"room\", \"==\", room),\n      orderBy(\"createdAt\")\n    );\n    const unsuscribe = onSnapshot(queryMessages, (snapshot) => {\n      let messages = [];\n      snapshot.forEach((doc) => {\n        messages.push({ ...doc.data(), id: doc.id });\n      });\n      console.log(messages);\n      setMessages(messages);\n    });\n\n    return () => unsuscribe();\n  }, []);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (newMessage === \"\") return;\n    await addDoc(messagesRef, {\n      text: newMessage,\n      createdAt: serverTimestamp(),\n      user: auth.currentUser.displayName,\n      room,\n    });\n\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"chat-app\">\n      <div className=\"header\">\n        <h1>Welcome to: {room.toUpperCase()}</h1>\n      </div>\n      <div className=\"messages\">\n        {messages.map((message) => (\n          <div key={message.id} className=\"message\">\n            <span className=\"user\">{message.user}:</span> {message.text}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={handleSubmit} className=\"new-message-form\">\n        <input\n          type=\"text\"\n          value={newMessage}\n          onChange={(event) => setNewMessage(event.target.value)}\n          className=\"new-message-input\"\n          placeholder=\"Type your message here...\"\n        />\n        <button type=\"submit\" className=\"send-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n","C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\components\\AppWrapper.js",[],[],"C:\\Users\\JIBIN\\Documents\\GitHub\\Chat-App-using-React\\src\\firebase-config.js",[],[],{"ruleId":"41","severity":2,"message":"42","line":11,"column":31,"nodeType":"43","messageId":"44","endLine":11,"endColumn":39},{"ruleId":"41","severity":2,"message":"42","line":12,"column":35,"nodeType":"43","messageId":"44","endLine":12,"endColumn":43},{"ruleId":"41","severity":2,"message":"42","line":13,"column":27,"nodeType":"43","messageId":"44","endLine":13,"endColumn":35},{"ruleId":"41","severity":2,"message":"42","line":17,"column":35,"nodeType":"43","messageId":"44","endLine":17,"endColumn":43},{"ruleId":"41","severity":2,"message":"42","line":18,"column":39,"nodeType":"43","messageId":"44","endLine":18,"endColumn":47},{"ruleId":"41","severity":2,"message":"45","line":21,"column":3,"nodeType":"43","messageId":"44","endLine":21,"endColumn":12},{"ruleId":"46","severity":1,"message":"47","line":37,"column":6,"nodeType":"48","endLine":37,"endColumn":8,"suggestions":"49"},"no-undef","'useState' is not defined.","Identifier","undef","'useEffect' is not defined.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'messagesRef' and 'room'. Either include them or remove the dependency array.","ArrayExpression",["50"],{"desc":"51","fix":"52"},"Update the dependencies array to be: [messagesRef, room]",{"range":"53","text":"54"},[874,876],"[messagesRef, room]"]